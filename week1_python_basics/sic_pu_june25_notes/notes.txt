SIC TRAINING PRESIDENCY UNIVERSITY BENGALURU

DAY1 MONDAY 23-06-2025
Github Repo creation
	Login to github
	On top mid screen Click +
	Click New Repository
	In new window, name of the repo, description, keep the repo public and select add readme file and click create repo green button
	
We are going to link our Git Repo on our system.
We are going to create a copy of the Git Repo in our system which we shall call as local Repo.
Now to work on the local Repo, we have to 1st link our Git Account with our computer (configuration)
Now we can work on the Local Repo. However, if we have to update the Remote Repo (server) w.r.t. the local Repo we have top authenticate everytime.
To avoid authentication for every PUSH, we can use PAT (Personal Access Token).

STEPS TO CREATE PAT:
Right top corner of logged-in page, click the profile icon
Scroll down and click settings
next page, scroll down and click developer settings (left bottyom)
next page, left top, click personal access token (select tokens classic)
next page, click generate new token, select classic
next page, add note (this PAT is created for my personal learning during my engg days)
Click Expiration, select No Expiry
Now select the top check box named Repo
Now fully scroll down and click generate PAT button
Next page, copy the PAT and Mail it to yourself (mail subject: git pat). So that the PAT is always with you and also safely.
--------------------------------------------------
DAY2 TUESDAY 24-06-2025

TOPICS FOR THE DAY
Git, Python shell

APP INSTALATIONS:
Note: Always prefer Downloading installer/setup file (.msi)
1. vs code
Google search: Download vs code
Link: https://code.visualstudio.com/download
Click on respective OS

2. git
Google search: Download vs code
Link: https://git-scm.com/downloads
Click on respective OS

3. notepad++
Google search: Download vs code
Link: https://git-scm.com/downloads
Click 8.7.7 or 8.8 version
in new page, click the Box shaped download link.

4. python
Google search: Download python
Link: https://www.python.org/downloads/
Click the yellow button if your OS is Windows else select the OS

Note:
Now CUT and PASTE all the .msi files into their respective folders inside the software folder in C drive.

ORGANISING(ARRANGING FILES AND FOLDERS):
Create software folder in C drive and create one folder for every software or app you download.
Now cut and paste the installer files in to their respective folder inside the software folder in C drive.
Now from here doubl click and install the Apps.

Create a folder named "learning" in D or E drive. (if not available in C drive)
Now, inside the learning folder we create respective folders for java, python, cpp, cyber_security etc.

GIT CONFIGURATION:
$ git config --global user.name "neelmyna"
$ git config --global user.email "EMAIL-ID"

CLONING A REPO:
$ git clone https://github.com/neelmyna/sic_pu_june25

By running the above command, we get a copy(clone) of our repo in our system.

$ git clone https://PAT@github.com/neelmyna/sic_pu_june25

git clone https://3kjflrwkjljfdkjvskjvbsjkd@github.com/neelmyna/sic_pu_june25

IMPORTANT GIT COMMANDS:
To update my remote repo w.r.t. local repo:

1. Let the git add the files that need to updated
2. Let the git commit the changes (Here, git creates an object inside which it copies all the files that need to be updated into the server. Also this object is cyber secured with encription. This copy is called as soft copy)
3. Copy the commited object from the laptop/system to github server (to this last step, we need internet)

1. stage	2. commit 	3. push

$ git add .
$ git commit -m "relavant message"
$ git push origin main
---------------------------------------------
PYTHON

In every language, there 2 stages of a program (Compile time and runtime)

C/C++:
editing -> compilation -> execution
compilatiion: pre-processing (macro expansion) -> Compilation (syntax checking -> translation) -> interpretation -> execution

Operators in Python:
Arithmetic Operators:
+ - * / // ** %

-> All the Arithmetic operators are binary operators, i.e. they take 2 i/p (operands)
25 + 3
-> i/p are numbers. o/p is number
-> The arithmetic operations are performed from L to R in an expression. Associtivity
23 - 45 + 12 (Here 23 - 45 is performed 1st. the difference is stored in Accumalator and it is added to 12 immediately by the ALU).
-> + and - have least precedence
-> % / // * have higher precdedence
-> ** has the highest precedence
-> Arithmetic operators have higher precedence than relational operators and logical operators.

TYPES OF MEMORY
Secondary memory (hdd/ssd)
RAM
cache, buffers (unbuffered, line buffers and user customised delimited buffers), registers (general purpose, special purpose)
Special Purpose registers: MAR, MDR, SP, FP, IR, PC, Accumalator

scanf("%s", str); // space and newline are delimiters
gets_s("%s", str, 32); 
scanf("%[$^]s", str);
kbhit()

-> + and - have least precedence
-> % / // * have higher precdedence
-> ** has the highest precedence

34 + 45 * 5 ** 2
Here the power operation is performed 1st. Then multiplication and lastly the addition.

2 + 5 + 9 - 11 + 13
7 + 9 - 11 + 13
16 - 11 + 13
5 + 13
18

1 ** 2 ** 3 ** 2
1 ** 2 ** 9
1 ** 512
1

2.5 + 25
Here the sum operation cannot be performed unless 25 is casted to 25.0

Positive Integers are stored by converting them from decimal/octal/hexadecimal to binary
Negative numbers are stored by converting the number to binary and then to 2s compliment.
Floating point numbers are stored in binary using IEEE standards.

25 - (-13) + 4.5

13
0000 1101
1111 0010
1111 0011
-1*2(7) + 1*2(6) + 32 + 16 + 3
-128 + 64 + 32 + 19
-64 + 51
= -13

n = 0o25

0000
1111
15
f

ff
11111111
240 + 15 = 255

RELATIONAL OPERATORS:
> < >= <= != ==

-> All are binary operators
-> i/p are numbers. o/p is boolean
-> The >= and <= operators are looks redundant, but are required.

size = 20
Do the THIS size times
for i = 1 and i <= size, keep doing:
	THIS

for i = 1 and i < size+1, keep doing:
	THIS

for i = 1 and i <= 20, keep doing:
	THIS

for i = 1 and i < 21, keep doing:
	THIS

Thus the operators >= and <= increases the readability. Hence we use it.

***IMPORTANT: In programming the 1st priority (overall) is always simplicity (readability, maintainability)

[20, 40]	Closed interval The range is from 20 to 40 (both inclusive)
(15, 35)	Open Interval. The nd points are not included. So the range is 16 to 34
[25, 50)	Right Open. Range is 25 to 49

value >= 20 and value <= 40
value > 15 and value < 35
value >= 25 and value < 50

Relational operators have lesser precedence than Arithmetic but higher than logical operators.

LOGICAL OPERATORS:
and or not !

There is only short circuited "and" and "or" in Python

In C/C++/Java
C1 & C2 && C3

c1 and c2 and c3 ... c10

C:
int n = 10, m = 20, k = 15;
if(n++ >= m && k-- != m)
	print Goa
else
	print Bali
print n m k 
// Bali  11 20 15

int n = 20, m = 20, k = 15;
if(n++ <= m | k-- != m) T or F
	print Goa
else
	print Bali
print n m k 
// Goa 21 20 14
	
'3' - 48
51 - 48 = 3

str input()
str input(str)
NOTE: There is no function overloading in Python.

DAY4 THURSDAY 26-06-2025

Mantra:
The code we define/implement must be understandable by any programmer in the world.

The O/P (execution) must be understandable by any common person in the world.

range() is a function in Python which takes a range of values and YIELDS the values one by one from the range depending on the increment.

range(10)
values the range yields are 0 to 9 with increment of +1
range(1, 20)
values the range yields are 1 to 19 with increment of +1
range(1, 20, 3)
values the range yields are 1 to 19 with increment of +3
range(21, 2, -3)
values the range yields are 21 to 3 with increment of -3


