SIC TRAINING PRESIDENCY UNIVERSITY BENGALURU

DAY1 MONDAY 23-06-2025
Github Repo creation
	Login to github
	On top mid screen Click +
	Click New Repository
	In new window, name of the repo, description, keep the repo public and select add readme file and click create repo green button
	
We are going to link our Git Repo on our system.
We are going to create a copy of the Git Repo in our system which we shall call as local Repo.
Now to work on the local Repo, we have to 1st link our Git Account with our computer (configuration)
Now we can work on the Local Repo. However, if we have to update the Remote Repo (server) w.r.t. the local Repo we have top authenticate everytime.
To avoid authentication for every PUSH, we can use PAT (Personal Access Token).

STEPS TO CREATE PAT:
Right top corner of logged-in page, click the profile icon
Scroll down and click settings
next page, scroll down and click developer settings (left bottyom)
next page, left top, click personal access token (select tokens classic)
next page, click generate new token, select classic
next page, add note (this PAT is created for my personal learning during my engg days)
Click Expiration, select No Expiry
Now select the top check box named Repo
Now fully scroll down and click generate PAT button
Next page, copy the PAT and Mail it to yourself (mail subject: git pat). So that the PAT is always with you and also safely.
--------------------------------------------------
DAY2 TUESDAY 24-06-2025

TOPICS FOR THE DAY
Git, Python shell

APP INSTALATIONS:
Note: Always prefer Downloading installer/setup file (.msi)
1. vs code
Google search: Download vs code
Link: https://code.visualstudio.com/download
Click on respective OS

2. git
Google search: Download vs code
Link: https://git-scm.com/downloads
Click on respective OS

3. notepad++
Google search: Download vs code
Link: https://git-scm.com/downloads
Click 8.7.7 or 8.8 version
in new page, click the Box shaped download link.

4. python
Google search: Download python
Link: https://www.python.org/downloads/
Click the yellow button if your OS is Windows else select the OS

Note:
Now CUT and PASTE all the .msi files into their respective folders inside the software folder in C drive.

ORGANISING(ARRANGING FILES AND FOLDERS):
Create software folder in C drive and create one folder for every software or app you download.
Now cut and paste the installer files in to their respective folder inside the software folder in C drive.
Now from here doubl click and install the Apps.

Create a folder named "learning" in D or E drive. (if not available in C drive)
Now, inside the learning folder we create respective folders for java, python, cpp, cyber_security etc.

GIT CONFIGURATION:
$ git config --global user.name "neelmyna"
$ git config --global user.email "EMAIL-ID"

CLONING A REPO:
$ git clone https://github.com/neelmyna/sic_pu_june25

By running the above command, we get a copy(clone) of our repo in our system.

$ git clone https://PAT@github.com/neelmyna/sic_pu_june25

git clone https://3kjflrwkjljfdkjvskjvbsjkd@github.com/neelmyna/sic_pu_june25

IMPORTANT GIT COMMANDS:
To update my remote repo w.r.t. local repo:

1. Let the git add the files that need to updated
2. Let the git commit the changes (Here, git creates an object inside which it copies all the files that need to be updated into the server. Also this object is cyber secured with encription. This copy is called as soft copy)
3. Copy the commited object from the laptop/system to github server (to this last step, we need internet)

1. stage	2. commit 	3. push

$ git add .
$ git commit -m "relavant message"
$ git push origin main
---------------------------------------------
PYTHON

In every language, there 2 stages of a program (Compile time and runtime)

C/C++:
editing -> compilation -> execution
compilatiion: pre-processing (macro expansion) -> Compilation (syntax checking -> translation) -> interpretation -> execution

Operators in Python:
Arithmetic Operators:
+ - * / // ** %

-> All the Arithmetic operators are binary operators, i.e. they take 2 i/p (operands)
25 + 3
-> i/p are numbers. o/p is number
-> The arithmetic operations are performed from L to R in an expression. Associtivity
23 - 45 + 12 (Here 23 - 45 is performed 1st. the difference is stored in Accumalator and it is added to 12 immediately by the ALU).
-> + and - have least precedence
-> % / // * have higher precdedence
-> ** has the highest precedence
-> Arithmetic operators have higher precedence than relational operators and logical operators.

TYPES OF MEMORY
Secondary memory (hdd/ssd)
RAM
cache, buffers (unbuffered, line buffers and user customised delimited buffers), registers (general purpose, special purpose)
Special Purpose registers: MAR, MDR, SP, FP, IR, PC, Accumalator

scanf("%s", str); // space and newline are delimiters
gets_s("%s", str, 32); 
scanf("%[$^]s", str);
kbhit()

-> + and - have least precedence
-> % / // * have higher precdedence
-> ** has the highest precedence

34 + 45 * 5 ** 2
Here the power operation is performed 1st. Then multiplication and lastly the addition.

2 + 5 + 9 - 11 + 13
7 + 9 - 11 + 13
16 - 11 + 13
5 + 13
18

1 ** 2 ** 3 ** 2
1 ** 2 ** 9
1 ** 512
1

2.5 + 25
Here the sum operation cannot be performed unless 25 is casted to 25.0

Positive Integers are stored by converting them from decimal/octal/hexadecimal to binary
Negative numbers are stored by converting the number to binary and then to 2s compliment.
Floating point numbers are stored in binary using IEEE standards.

25 - (-13) + 4.5

13
0000 1101
1111 0010
1111 0011
-1*2(7) + 1*2(6) + 32 + 16 + 3
-128 + 64 + 32 + 19
-64 + 51
= -13

n = 0o25

0000
1111
15
f

ff
11111111
240 + 15 = 255

RELATIONAL OPERATORS:
> < >= <= != ==

-> All are binary operators
-> i/p are numbers. o/p is boolean
-> The >= and <= operators are looks redundant, but are required.

size = 20
Do the THIS size times
for i = 1 and i <= size, keep doing:
	THIS

for i = 1 and i < size+1, keep doing:
	THIS

for i = 1 and i <= 20, keep doing:
	THIS

for i = 1 and i < 21, keep doing:
	THIS

Thus the operators >= and <= increases the readability. Hence we use it.

***IMPORTANT: In programming the 1st priority (overall) is always simplicity (readability, maintainability)

[20, 40]	Closed interval The range is from 20 to 40 (both inclusive)
(15, 35)	Open Interval. The nd points are not included. So the range is 16 to 34
[25, 50)	Right Open. Range is 25 to 49

value >= 20 and value <= 40
value > 15 and value < 35
value >= 25 and value < 50

Relational operators have lesser precedence than Arithmetic but higher than logical operators.

LOGICAL OPERATORS:
and or not !

There is only short circuited "and" and "or" in Python

In C/C++/Java
C1 & C2 && C3

c1 and c2 and c3 ... c10

C:
int n = 10, m = 20, k = 15;
if(n++ >= m && k-- != m)
	print Goa
else
	print Bali
print n m k 
// Bali  11 20 15

int n = 20, m = 20, k = 15;
if(n++ <= m | k-- != m) T or F
	print Goa
else
	print Bali
print n m k 
// Goa 21 20 14
	
'3' - 48
51 - 48 = 3

str input()
str input(str)
NOTE: There is no function overloading in Python.

DAY4 THURSDAY 26-06-2025

Mantra:
The code we define/implement must be understandable by any programmer in the world.

The O/P (execution) must be understandable by any common person in the world.

range() is a function in Python which takes a range of values and YIELDS the values one by one from the range depending on the increment.

range(10)
values the range yields are 0 to 9 with increment of +1
range(1, 20)
values the range yields are 1 to 19 with increment of +1
range(1, 20, 3)
values the range yields are 1 to 19 with increment of +3
range(21, 2, -3)
values the range yields are 21 to 3 with increment of -3


DAY5 FRIDAY 27-06-2025

ARRAY/LIST:
-> It is a data structure in which all elements of the array are stored in continuous memory locations. i.e. there is no gap between any 2 consecutive elements of the array.
-> What is a Data Structure?
Ans: Storage + Arrangement of data in memory.
-> In the array usually all elements will be of the same DT. However, this need not true in the case of Python.
-> An array is time efficient DS. Because the look-up is O(1). i.e. it takes 1 unit time to access any element in an array.
-> Assuming size of an array is fixed, there is always wastage or shortage of memory. Hence fixed size arrays are always memory inefficient.
-> When ever we pass an array to a function/method we pass only reference (address of 1st element) of the rray. This kind of call to the function is called as call by reference.

List in Python:
-> It is an ordered DS (where we can use the indexing)
-> Mutable

List class in Python

Problems:
1. Find smallest and biggest elements in an list of n numbers.
2. Find the frequency an element in a list of n elements.
3. Remove the duplicates in a list of size n
**4. Given a number, find very next possible bigger number that has all the digits of the given number.
5. Accpet a number from the user (4 digit number where a digit can repeat at most 2 times )and print the coutn of recursions reqired to arrive at Karpekar's Constant.
Recursive Problems:
1. Find Factorial of a number
2. Print N Fibo terms with 1 and 2 as 1st 2 terms.
3. Find sum of list elements
-----------------------------------------------------------------
DAY6 SATURDAY 28-06-2025

List example programs 
l1 = [1, 2, 5, 2, 4, 3]
print(sorted(l1))
print(l1)
print(l1.remove(2))
--------------------------
List Slicing:

----------------------------------------
Implement Stack using list, insert and delete from rear of the list
Implement Stack using list, insert and delete from front of the list
Implement Queue using list, insert at rear delete from front the list
Implement Queue using list, insert front, delete from rear of the list

----------------------------------------------------------------------------------

DAY-7 Monday 30-06-2025 

How inheritance is technically implemented?
Why a constructor cannot be final abstract and static?
Why main() is public static and void?
Explain runtime polymorphism (method over-riding).
What is collection and explain its use and memory mapping.

List Comprehension:
list is a DS in Python (pre defined). list is a class
list is ordered
list is mutable

l1 = [1, 43, 3, 2, 5]

l2 = [1, 2, 5, 4, 3]

name = 'shanmugha'

name.find('u')
name.find('mu', 2)
name.find('uu', 2, 7)
name.index('mugha', 3, 7)




--------------------------------------------------------------------------
DAY9 WEDNESDAY 02-07-2025

Bubble Sort:
In this sorting technique we start from any of the 2 ends of the list and compare consecutive elements.
Assuming we start from Left and wish to sort in scaending order, we swap the elements if the left element is bigger than the right one.
Continue doing so upto the end of UNSORTED ARRAY and thus we have put the biggest element in the unsorted array in its final position.
Thus the element is taken from the unsorted array into the sorted array.

RUN: Accessing all the elements in an array exactly once from one end of the array to the other.
In Bubble sort, we bring the element into its final position in one Run over the unsorted array.

Bubble sort doesnt predict anything before starting the sort algorithm nor it knows if the list is already sorted (i.e. after the 1st Run)

The biggest element of the specific Run is moved to its final position. This is called as BUBBLING the element to a corner.

While comparing the elements if we observe that there are no Swaps in a Run, then the list is already sorted.
Thus we have a way to optimize the Bubble Sort. The optimzed Bubble sort has an improved efficiency of O(n).

The Bubble Sort Algorithm:
Start from one end and move towards other end of unsorted array
	compare consecutive elements
	if left element is bigger than the right
		swap the elements

With each iteration of the Run, the size of sorted list increases by one while the size of unsorted array decreases by one element.

Pseudocode

Assume input size to be N
for i from 1 to N-1 do:
	for j from 1 to N-1-i do:
		if list[j] > list[j+1]
			swap list[j], list[j+1]

The outer loop Runs through the list (Accessing elements of the list exactly once)
The inner loop compares consecutive elements of the unsorted list

Optimized Bubble Sort:
for i from 1 to N-1 do:
	sorted = True # Assume the list is already sorted
	for j from 1 to N-1-i do:
		if list[j] > list[j+1]
			swap list[j], list[j+1]
			sorted = False
	if(sorted)
		break outer loop

BCE of improved(optimised) Bubble sort is O(n)
WCE of Bubble sort O(n2)


1 2 3 4 5 6 7 8 9 10
1  + 10 = 11
2  + 9  = 11

(1 + n) * (n / 2)
= 11 * 5 = 55

1 2 3 4 5 6 7 8 9.... 50
1 + 50 = 51
2 + 49 = 51

25+ 26 = 51
(1+50)*25 = 1275
----------------------------------
n-1 times the outer loop works
i=1  n-2 times
i=2  n-3 times
i=3  n-4

i=n-1  n=1
1 + 2 + 3 + .... n-3 + n-2 + n-1
n(n-1)/2
n2/2 - n/2
= n2/2
= n2

8000
3_20_00_000 - 4_000
= 3_20_00_000

The Bubble sort doesnt follow any specific mathematical formula or technique.
Its solution is what we find on day to day basis.
Thus it has come from centuries of commonly used problem solving technique (Trivial way of problem solving)
Which is said to come under BRUTE FORCE TECHNIQUE.
Thus In Brute Force technique there is Inventor Name.
---------------------------------------------
Selection Sort (Brute Force Technique)

23   4    1    33    22   19   50    25
i=1
element  = 23  4   1
position = 1   2   3
After the loop has excited, swap the elements at positions position and i
1   4    23    33    22   19   50    25
i=2
element  = 4 
position = 2
1   4    23    33    22   19   50    25
i=3
element  = 23  22  19 
position = 3   5    6
1  4  19  33  22  23  50  25

In each iteration of i, we SELECT the ith smallest element and put in its final position.

Thus, there are N-1 iterations for i
And N-1-i comparisons in each iteration of i

Assignment: Can we optimize Selection Sort the way we did with Bubble sort and thus bring the BCE of Selection sort from O(n2) to O(n)

NOTE: We need not apply any sorting on the given array when (when we know the given array is already sorted)

for i from 2 to N do:
	element = list[i-1]
	position = i-1
	for j = i-1 to N do:
		if list[j] < element then:
			element = list[j]
			position = j
	swap list[position] with list[i-1]

	--------------------------------------------------------------------------------------------
	OBJECT ORIENTED PROGRAMMING CONCEPTS:
Inheritance: 
polymorphism:
abstraction:
encapsulation:

super()
private members using _ (underscore)
inherit in Python 
class Derived (Base):

Parent most class in Python Obj
There is no compile time in Python. Hence no question of static polymorphism (function over loading)

When a Function is called:
Prologue
Business logic
Epilogue

static member:

class Cubical:
	str printer
	water_dispencer
	def __init__(self):
		chair
		mug
		computer
		drawer

	@static
	def get_printer(cls):
		return printer

-----------------------------------------------------------------------------
Tree:
-> TREE is a DS
-> Non Linear DS
-> ACYCLIC DS (All PATHs in the DS are unique)
-> The start/entry point of a Tree is called as ROOT
-> Synonym for Tree is HIERARCHICAL DS
Example: File System (Random Tree)
-> BINARY TREE is a Tree which has a maximum (at most) of 2 CHILD NODES for every possible NODE in the Tree.
-> The Root Node of the Tree is said to be at a LEVEL 1. Thus its immediate child node is at a LEVEL 2 and so on.
The maximum possible Level in a Tree is said be DEPTH or HEIGHT of the Tree.
In a Binary Tree of a Height N, we can have maximum of (2 power N) - 1 nodes.
TRAVERSAL in a Tree is when we move from the current node to one of its immediate child node.
A Tree with exactly or almost 2N-1 nodes is said to be COMPLETE BINARY TREE.
The 2 child nodes of a node in a binary tree are said to be LEFT-CHILD and RIGHT-CHILD
The Tree we can traverse strating from the Left-Child Node is said to be LEFT SUB-TREE and thus we can have Right Sub-Tree
In a Complete Binary tree (BT) every traversal will isolate or remove 50% of the search area.
If in a BT every node has exactly Zero or Two child nodes only, then such a BT is said to be STRICTLY BT.
If in a BT, the data is ARRANGED in such way that data of the left child of every node is smaller than its own data (data of Parent node) and data of the right child node is greater than or equal to its own data, then such a BT is called as BINARY SEARCH TREE (BST).
In a BST if the number of nodes is very small than 2N-1 (where N is tree height) then such a tree is said be UNBALANCED TREE. Conversly balanced tree and perfectly balanced is COMPLETE BST or BBST.
The highest level in a tree is the HEIGHT of the tree.
A node with  no child nodes is said to be LEAF NODE (Brahmachari node)
While traversing a BT when ever we reach a new node, it itself can be considered as Root and the nodes that can be reached from it as nodes of the tree. Thus to perform any operation on a BT, we always Traverse and while traversing (for traversal) we can apply the solution RECURSSIVELY.
Traversal exactly is to reach every node in the Tree exactly Once.
If you traverse the BT in the order Left-Root-Right (LR`R) then it is said to be In-Order traversal.
If you traverse the BT in the order Root-Left-Right (R`LR) then it is said to be In-Order traversal.
If you traverse the BT in the order Left-Right-Root (LRR`) then it is said to be In-Order traversal.
A new node is always added into the BST as Leaf Node.

Balancing a BST
Self balancing BST
Contructing a BST using 2 traversals 
CRUD operations

Deleting a node from a BST:
1. node with 0 child nodes 
2. node with 1 child nodes 
3. node with 2 child nodes
--------------------------------------------------------------------
SESSION-14  08-07-2025

https://docs.google.com/forms/d/1J2g0nOomI3mav_t2LzcTLgtID6Ne1KNHCt5oLullvQE/edit

def my_function(param1, param2 = 10):
    pass

def my_function2(param1 = 10, param2):
    pass

my_function(10)
my_function2(10)
-----------------------
def my_function(y):
	def inner_function(x):
		return x + y   # return x + 5
	return inner_function

closure = my_function(5)
print(closure(10)) # outputs 15

int num = 10;
int* ptr = NULL;
ptr = &num;

float my_func(int, char); // function declaration

float (*fp)(int, char); // function pointer declaration
fp = &my_func

A pointer of a specific DT can point any variable of that DT
A function pointer of a specific prototype(SIGNATURE) can point to any function of that particular signature.
----------------------------------------------------
Deletion of a node in a BST:
1. If the node to be deleted is leaf node:
	Make the respective link of the Parent node of the node being deleted None.
2. If node to be deleted has one child
	Replace the child node of the node being deleted with itself.
3. If node to be deleted has 2 children
	Make the right child of the node being deleted, the right child of its parent (Thus the right grand child become right child). The right child of the node being deleted replaces itself.
	And the left child node (and its descendents(sub tree)) becomes the left child of the left most child of its right child.
4. What is we are deleting the root itself (when it has 2 child nodes) ???
-------------------------------------------------------
Must be done:
closure, lambda, Hashing (session15)
Problem Solving: backtracking, greedy, dynamic programming (session16)
numpy pandas and matplotlib seaborn (Optionally DB) (session18-20)
PROJECT (session20-23)
Optional:
radix sort, heap sort, bucket sort, AVL Tree (session17)
flask with mongo or Mysql
(Graph Algorithms: DFS, BFS, Djiktras, N-Queens, Travel Slalesman)
packages/modules: os (file handling), sys, math, tkinter, pickle
-----------------------------------------------------------------------------------------
Most Important Git Repo Link for your preparation for Placement Preparation
https://github.com/gmaheswaranmca/au-guvi 
--------------------------------------------------------------------------------------------
hackthon overview:
data shld be taken in the form of .csv or .xlsx
one or multiple sheet data
or data can also be in DB
          |
this take into .csv
then do numpy and pandas for data analysis

